WEBVTT

1
00:00:00.000 --> 00:00:03.030
Welcome back to digital
forensic concepts.

2
00:00:03.030 --> 00:00:05.715
We're talking about
keywords in grep searches.

3
00:00:05.715 --> 00:00:07.950
In this module, Module 2,

4
00:00:07.950 --> 00:00:11.835
we're going to review
grep and extended grep.

5
00:00:11.835 --> 00:00:16.950
Grep stands for global
regular expression print.

6
00:00:16.950 --> 00:00:20.295
It functions on Linux and Mac,

7
00:00:20.295 --> 00:00:25.740
GNU grep version 3.4
is the most recent.

8
00:00:25.740 --> 00:00:27.900
Windows does have an equivalent.

9
00:00:27.900 --> 00:00:30.700
It's called findstr,

10
00:00:30.950 --> 00:00:36.605
F-I-N-D-S-T-R. Now when
we're talking about grep,

11
00:00:36.605 --> 00:00:39.725
the syntax is we
have our options.

12
00:00:39.725 --> 00:00:42.830
Then we would have
our search term,

13
00:00:42.830 --> 00:00:44.855
and then we would
have the file name

14
00:00:44.855 --> 00:00:46.645
of the file we're searching.

15
00:00:46.645 --> 00:00:49.285
With the Windows
equivalent findstr,

16
00:00:49.285 --> 00:00:51.365
the syntax would be flags,

17
00:00:51.365 --> 00:00:53.375
which are very
similar to options.

18
00:00:53.375 --> 00:00:55.385
Then we would have
our search term,

19
00:00:55.385 --> 00:00:57.290
and then we would
have the path and

20
00:00:57.290 --> 00:01:00.870
file name of the file
that we wanted to search.

21
00:01:01.670 --> 00:01:04.070
We're talking about grep going

22
00:01:04.070 --> 00:01:05.755
to go over some of the options.

23
00:01:05.755 --> 00:01:10.705
The grep minus w means we're
searching for a whole word.

24
00:01:10.705 --> 00:01:14.795
The minus i would be
case insensitive.

25
00:01:14.795 --> 00:01:18.560
The minus n would show us
the line number of the hit.

26
00:01:18.560 --> 00:01:19.910
So it would actually
print the line

27
00:01:19.910 --> 00:01:21.680
number that they had occurred in.

28
00:01:21.680 --> 00:01:25.690
The minus r is for recurrent
or recursive search,

29
00:01:25.690 --> 00:01:27.950
and that would search a directory

30
00:01:27.950 --> 00:01:31.090
recursively for our search term.

31
00:01:31.090 --> 00:01:34.730
The minus l will list files which

32
00:01:34.730 --> 00:01:38.030
search term matches and
that we could use when

33
00:01:38.030 --> 00:01:41.050
we search the directory
with the minus r.

34
00:01:41.050 --> 00:01:45.200
The minus lowercase c will list

35
00:01:45.200 --> 00:01:48.470
the files with search
term matches and it will

36
00:01:48.470 --> 00:01:52.750
list the number of hits
it finds in each file.

37
00:01:52.750 --> 00:01:58.170
The minus b is for the
number of lines before.

38
00:01:58.170 --> 00:01:59.480
Were going to be
seeing in our example,

39
00:01:59.480 --> 00:02:02.030
we have a minus
before and that would

40
00:02:02.030 --> 00:02:05.350
show us four lines before hit.

41
00:02:05.350 --> 00:02:09.660
The minus A stands
for after the hit.

42
00:02:09.660 --> 00:02:13.040
If we had in our example
a minus A 4 that will

43
00:02:13.040 --> 00:02:16.705
show us four lines after our hit.

44
00:02:16.705 --> 00:02:20.500
Now the minus C combines
both the B and A,

45
00:02:20.500 --> 00:02:22.100
and it'll show us the number of

46
00:02:22.100 --> 00:02:25.025
lines before and after our hit.

47
00:02:25.025 --> 00:02:32.745
Now our operators, minus
E means extended grep,

48
00:02:32.745 --> 00:02:36.740
and the syntax here is grep

49
00:02:36.740 --> 00:02:41.480
minus E. Then our
regular expression,

50
00:02:41.480 --> 00:02:42.905
what we're searching for,

51
00:02:42.905 --> 00:02:44.975
and then our filename.

52
00:02:44.975 --> 00:02:48.730
A d would be any digit.

53
00:02:48.730 --> 00:02:51.900
A dot would be a
single character.

54
00:02:51.900 --> 00:02:54.600
A question mark means

55
00:02:54.600 --> 00:02:57.220
the preceding character
matches zero,

56
00:02:57.220 --> 00:02:59.045
or one times only.

57
00:02:59.045 --> 00:03:02.450
The asterisk means the
preceding character matches

58
00:03:02.450 --> 00:03:04.570
zero, or more times.

59
00:03:04.570 --> 00:03:05.940
The plus sign means

60
00:03:05.940 --> 00:03:09.630
the preceding character
matches one, or more times.

61
00:03:09.630 --> 00:03:12.155
The brackets you see here is what

62
00:03:12.155 --> 00:03:15.745
allows a group of characters
to behave as one function.

63
00:03:15.745 --> 00:03:18.710
The pipe symbol is
the logical OR,

64
00:03:18.710 --> 00:03:22.250
and the upward caret signifies

65
00:03:22.250 --> 00:03:24.610
matching at the
beginning of a line.

66
00:03:24.610 --> 00:03:26.690
You'll see these will
all make more sense when

67
00:03:26.690 --> 00:03:28.640
we look at an actual
regular expression,

68
00:03:28.640 --> 00:03:30.140
which we will very shortly.

69
00:03:30.140 --> 00:03:34.025
The dollar sign signifies
matching the end of a line.

70
00:03:34.025 --> 00:03:36.515
The slash is the
escape character.

71
00:03:36.515 --> 00:03:39.545
Now when we're using
the curly brackets,

72
00:03:39.545 --> 00:03:41.570
we could have a
number inside there.

73
00:03:41.570 --> 00:03:43.220
That's what the n stands for.

74
00:03:43.220 --> 00:03:46.025
It means the preceding
character matches

75
00:03:46.025 --> 00:03:49.370
exactly n times whatever
that number is.

76
00:03:49.370 --> 00:03:52.300
If we had an n and a common m,

77
00:03:52.300 --> 00:03:55.010
that would mean the
preceding character matches

78
00:03:55.010 --> 00:03:56.779
at least n times,

79
00:03:56.779 --> 00:03:59.240
but not more than m times.

80
00:03:59.240 --> 00:04:00.770
Whatever numbers we put in there,

81
00:04:00.770 --> 00:04:03.510
we could put in a
one, and a five,

82
00:04:03.510 --> 00:04:06.065
and that would mean it
matches at least one time,

83
00:04:06.065 --> 00:04:08.390
but not more than five times.

84
00:04:08.390 --> 00:04:13.140
Now we have our square brackets
and we have characters,

85
00:04:13.140 --> 00:04:16.790
or symbols inside them
what that means is,

86
00:04:16.790 --> 00:04:19.190
the character is one or

87
00:04:19.190 --> 00:04:22.300
more of those included
within the square brackets.

88
00:04:22.300 --> 00:04:23.420
The character we're searching

89
00:04:23.420 --> 00:04:26.305
for whether is a
letter or a number,

90
00:04:26.305 --> 00:04:28.500
a dot or a dash would be one,

91
00:04:28.500 --> 00:04:32.130
or more of the characters
we're searching for.

92
00:04:32.130 --> 00:04:34.455
This included within
the square brackets.

93
00:04:34.455 --> 00:04:38.765
Now if we use the upward caret
within the square bracket,

94
00:04:38.765 --> 00:04:40.670
it means the character is

95
00:04:40.670 --> 00:04:43.490
not one of those
characters included.

96
00:04:43.490 --> 00:04:46.385
It would exclude the
a, the g, and the d,

97
00:04:46.385 --> 00:04:48.050
if we use the upward caret

98
00:04:48.050 --> 00:04:50.405
preceding them within
the square brackets.

99
00:04:50.405 --> 00:04:53.120
If we have square brackets and

100
00:04:53.120 --> 00:04:56.345
we're using a hyphen
between the c and the f,

101
00:04:56.345 --> 00:05:00.625
this dash within the square
brackets operates as a range.

102
00:05:00.625 --> 00:05:03.980
If I have a c and
an f as my range,

103
00:05:03.980 --> 00:05:07.100
my search results
would be a c, a d,

104
00:05:07.100 --> 00:05:10.610
an e, or an f, so all
the characters between c

105
00:05:10.610 --> 00:05:14.560
and f. The difference
between grep, and e-grep.

106
00:05:14.560 --> 00:05:17.100
In grep basic regular expressions

107
00:05:17.100 --> 00:05:19.725
are meta-characters,
a special characters,

108
00:05:19.725 --> 00:05:22.730
or operators lose their
meaning and they're

109
00:05:22.730 --> 00:05:26.680
treated as normal
characters in a string.

110
00:05:26.680 --> 00:05:29.780
In order for them to be
treated as special characters,

111
00:05:29.780 --> 00:05:33.230
we need to use that escape
character before that to

112
00:05:33.230 --> 00:05:34.850
signify that they are

113
00:05:34.850 --> 00:05:38.695
being used as a special
character, or an operator.

114
00:05:38.695 --> 00:05:41.865
In extended grep
regular expressions,

115
00:05:41.865 --> 00:05:45.765
are special characters
like our brackets,

116
00:05:45.765 --> 00:05:50.655
our or sign, our plus
sine, a question mark.

117
00:05:50.655 --> 00:05:53.215
These characters
retain their meaning

118
00:05:53.215 --> 00:05:55.130
and they're going
to be treated as

119
00:05:55.130 --> 00:05:58.010
special characters unless they

120
00:05:58.010 --> 00:06:00.650
are preceded by the
escape character.

121
00:06:00.650 --> 00:06:03.500
In our next module we're
going to take a look

122
00:06:03.500 --> 00:06:06.870
at using some grep expressions.