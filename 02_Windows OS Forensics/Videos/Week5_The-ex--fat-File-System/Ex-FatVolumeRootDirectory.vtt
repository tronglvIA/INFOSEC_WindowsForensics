WEBVTT

1
00:00:00.000 --> 00:00:01.787
Were in course 10.

2
00:00:01.787 --> 00:00:05.150
Talking about the Ex-fat file system.

3
00:00:05.150 --> 00:00:11.442
And in this module three we'll talk
about the Ex-fat root directory.

4
00:00:11.442 --> 00:00:16.639
The Ex-fat root directory has different
types of directory entries in it.

5
00:00:16.639 --> 00:00:20.522
Then these entries make
up a directory entry set,

6
00:00:20.522 --> 00:00:24.136
which we'll see as we
go through this course.

7
00:00:24.136 --> 00:00:28.935
One of the types of entries we
have is a volume label entry and

8
00:00:28.935 --> 00:00:34.215
this is going to tell us the user
created volume label of the volume

9
00:00:34.215 --> 00:00:40.458
that we're looking at and this is
considered a critical primary directory.

10
00:00:40.458 --> 00:00:43.138
It must be there.

11
00:00:43.138 --> 00:00:48.381
Even if the user didn't create one,
the entry will be left blank.

12
00:00:48.381 --> 00:00:52.850
We also have a system
file directory entries.

13
00:00:52.850 --> 00:00:57.997
Now, system files are what we talked about
the bit map which tracks the cluster

14
00:00:57.997 --> 00:01:02.989
allocation, which clusters are in use
in which clusters are available to be

15
00:01:02.989 --> 00:01:08.059
written to and the up case table which
handles the conversion of uppercase and

16
00:01:08.059 --> 00:01:11.040
lowercase letters for searching purposes.

17
00:01:11.040 --> 00:01:13.210
So those are our system files and

18
00:01:13.210 --> 00:01:17.486
those entries are also considered
critical primary entries.

19
00:01:17.486 --> 00:01:20.546
Then we have our file directory entry and

20
00:01:20.546 --> 00:01:24.877
this is going to give us some
information about the file.

21
00:01:24.877 --> 00:01:28.706
We're going to see that as we
go through this course and

22
00:01:28.706 --> 00:01:32.385
it is considered a critical
primary directly also.

23
00:01:32.385 --> 00:01:37.524
Then we have the extreme
extension directory entry and

24
00:01:37.524 --> 00:01:40.997
this is a critical secondary entry.

25
00:01:40.997 --> 00:01:46.524
And then last but not least we have
the file name, directory entry and

26
00:01:46.524 --> 00:01:50.735
this is also a critical
secondary directory entry.

27
00:01:50.735 --> 00:01:55.627
Now the file director entry,
the stream extension

28
00:01:55.627 --> 00:02:00.520
directory entry in the file
name directory entry of

29
00:02:00.520 --> 00:02:06.111
the three entries that make up
a file entry directory set.

30
00:02:06.111 --> 00:02:10.867
Take a look at the volume label, directory
entry and the slide shows what it

31
00:02:10.867 --> 00:02:15.718
would look like when we're going to take
a look at it and active disk editor.

32
00:02:15.718 --> 00:02:19.100
Now this is how it would
look to us in hexadecimal.

33
00:02:19.100 --> 00:02:24.692
We have our entry type and
the entry type is hex 83 [SOUND]

34
00:02:24.692 --> 00:02:30.174
which tells us this is a volume
label directory entry.

35
00:02:30.174 --> 00:02:34.998
We have a character account which
tells us how many characters

36
00:02:34.998 --> 00:02:39.912
are in the name of this volume label and
it says there are five and

37
00:02:39.912 --> 00:02:43.715
then we have the volume
label which is Ex-fat and

38
00:02:43.715 --> 00:02:47.094
we can See it consists of five characters.

39
00:02:47.094 --> 00:02:53.458
So that is the breakdown of how we would
read the volume label directory entry.

40
00:02:53.458 --> 00:02:59.752
Next we have one of those system files,
the allocation bitmap entry.

41
00:02:59.752 --> 00:03:04.049
This is considered a critical
primary directory entry.

42
00:03:04.049 --> 00:03:07.648
And it will begin with
a hexadecimal 81 and

43
00:03:07.648 --> 00:03:12.997
that lets us know what type it is
that we are looking at a allocation

44
00:03:12.997 --> 00:03:17.279
bit map directory entry,
then we will have our flags

45
00:03:17.279 --> 00:03:22.369
following that you can see
highlighted in green on the slide.

46
00:03:22.369 --> 00:03:25.734
In this case we don't have any flags but

47
00:03:25.734 --> 00:03:31.855
if we did we need to break them this
hexadecimal value out to buy a very and

48
00:03:31.855 --> 00:03:36.157
see which bits were set to
see which flags were on.

49
00:03:36.157 --> 00:03:37.996
Then we have are starting cluster.

50
00:03:37.996 --> 00:03:41.571
Our starting cluster in this case is 2,

51
00:03:41.571 --> 00:03:46.932
all these values in excess fat
are red little Indian starting

52
00:03:46.932 --> 00:03:51.788
from the volume boot record
to the directory entries.

53
00:03:51.788 --> 00:03:54.548
They are all red little Indian.

54
00:03:54.548 --> 00:03:56.922
So you see our first cluster is 2.

55
00:03:56.922 --> 00:04:03.417
And this tells us that we have two
clusters in the bitmap then we look down

56
00:04:03.417 --> 00:04:08.939
and we can see our data length is
the next value that we have and

57
00:04:08.939 --> 00:04:14.681
that's highlighted in blue
starting with hexadecimal B8 and

58
00:04:14.681 --> 00:04:17.932
again that's red little Indian and

59
00:04:17.932 --> 00:04:22.946
in this case our data
length is 5000 816 Bytes.

60
00:04:22.946 --> 00:04:25.103
Now we have our up case table and

61
00:04:25.103 --> 00:04:28.838
this is the second system
file that we talked about and

62
00:04:28.838 --> 00:04:34.752
this is what converts are uppercase and
lowercase letters for searching purposes.

63
00:04:34.752 --> 00:04:39.139
It is considered a critical
primary directory entry and

64
00:04:39.139 --> 00:04:43.433
its entries type will start
with a hexadecimal 82 and

65
00:04:43.433 --> 00:04:48.869
that lets us know we're looking at
a up case table directory injury.

66
00:04:48.869 --> 00:04:53.801
We will have a table check some and
this is for air checking and

67
00:04:53.801 --> 00:04:58.057
that you can see is highlighted
in yellow up above and

68
00:04:58.057 --> 00:05:02.412
then we'll have the location
of our first cluster and

69
00:05:02.412 --> 00:05:05.604
that you can see highlighted in blue and

70
00:05:05.604 --> 00:05:11.349
again that value is red little Indians so
it would start in cluster 4.

71
00:05:11.349 --> 00:05:16.202
And then we have the data
length which again is

72
00:05:16.202 --> 00:05:22.352
highlighted in pink and
it starts with a hexadecimal CC.

73
00:05:22.352 --> 00:05:29.251
And we convert that to decimal
that value we get 5000 800 36 and

74
00:05:29.251 --> 00:05:33.507
again these values are read little Indian.

75
00:05:33.507 --> 00:05:38.127
The directory entry set,

76
00:05:38.127 --> 00:05:42.750
directory record entry.

77
00:05:42.750 --> 00:05:47.853
This directory entry record is going
to track attributes, it's going to

78
00:05:47.853 --> 00:05:53.215
have all our file dates and times in it
are created access and modified times.

79
00:05:53.215 --> 00:05:58.331
It will not have a pointer to its
parent directory like we saw with other

80
00:05:58.331 --> 00:06:03.015
versions of fat where we had
the double dot, the first pointed to

81
00:06:03.015 --> 00:06:08.072
itself the dot entry in the second
double dot pointing to the parent.

82
00:06:08.072 --> 00:06:12.576
We will not have that in expat.

83
00:06:12.576 --> 00:06:17.865
We will have an added value in excess
fat of something called a UTC,

84
00:06:17.865 --> 00:06:20.232
Universal Time Code offset.

85
00:06:20.232 --> 00:06:25.853
So are other fat versions told us
our file times in local time and

86
00:06:25.853 --> 00:06:30.840
we had a millisecond offset but
we didn't have an offset

87
00:06:30.840 --> 00:06:35.719
to the universal time code,
in ex-fat we have that and

88
00:06:35.719 --> 00:06:39.884
we will see how we read
that value as we go down.

89
00:06:39.884 --> 00:06:42.916
We're also going to have
extreme extension and

90
00:06:42.916 --> 00:06:47.703
with the stream extension tracks is
attracts the size and where the file

91
00:06:47.703 --> 00:06:52.672
starts the starting extent the file
which would be the starting cluster.

92
00:06:52.672 --> 00:06:59.167
It also tracks the size of the file
name in the stream extension.

93
00:06:59.167 --> 00:07:04.689
The file name directory entry
contains the file name in Unicode.

94
00:07:04.689 --> 00:07:09.135
So that's another thing that's different
between Ex-fat and other versions of fat.

95
00:07:09.135 --> 00:07:14.347
It's going to write the file
name in Unicode like NTFS.

96
00:07:14.347 --> 00:07:17.596
Whereas in fact 32 it was in asking, so

97
00:07:17.596 --> 00:07:22.376
breaking this down a little
more the file directory entry,

98
00:07:22.376 --> 00:07:25.929
it is a critical primary directory injury.

99
00:07:25.929 --> 00:07:29.752
All files will have this entry.

100
00:07:29.752 --> 00:07:35.677
It's going to start with
a hexadecimal 85 when it's in use.

101
00:07:35.677 --> 00:07:41.178
When it's not in use,
it's going to start with a hexadecimal 05.

102
00:07:41.178 --> 00:07:45.645
And not in use means that
the file has been deleted, and

103
00:07:45.645 --> 00:07:51.977
now this directory entry is available
to be written to in the root directory.

104
00:07:51.977 --> 00:07:57.952
The next bite is going to tell
us our secondary account.

105
00:07:59.079 --> 00:08:02.271
And it must be a value between 2 and 18.

106
00:08:02.271 --> 00:08:06.858
And what it means is that is how many more
directory entries we have in this file

107
00:08:06.858 --> 00:08:08.211
directory entry set.

108
00:08:09.890 --> 00:08:14.720
There can be more than one
file name directory entry and

109
00:08:14.720 --> 00:08:20.611
there can be more than one file
stream extension directory entry.

110
00:08:21.890 --> 00:08:24.741
So we could have more than three.

111
00:08:24.741 --> 00:08:26.401
In our case, we just have three.

112
00:08:28.490 --> 00:08:33.990
Then we have a checksum for error checking
and then we have our attribute byte.

113
00:08:33.990 --> 00:08:39.796
And it's 2 bytes long for
the attribute Red Little Indian.

114
00:08:39.796 --> 00:08:41.232
And this is packed,

115
00:08:41.232 --> 00:08:46.190
so we would have to break this out
to see what attributes we had.

116
00:08:46.190 --> 00:08:51.246
So when we break out hexadecimal 16,
we could see it broken

117
00:08:51.246 --> 00:08:57.190
into binary here on the slide,
we have a hidden system directory.

118
00:08:57.190 --> 00:08:59.411
Those are the attributes that are set.

119
00:09:01.590 --> 00:09:04.690
Now we're going to move
down to our creation time.

120
00:09:04.690 --> 00:09:09.642
We have a creation date and time,
we have a last modified date and time,

121
00:09:09.642 --> 00:09:13.390
and we have the last accessed date and
time.

122
00:09:13.390 --> 00:09:18.322
Unlike FAT when we did not have
that last accessed date and

123
00:09:18.322 --> 00:09:22.345
time, we didn't have a time,
we do in exFAT.

124
00:09:22.345 --> 00:09:26.887
We still have the 10 millisecond offsets,
and

125
00:09:26.887 --> 00:09:31.316
we now have this new UTC,
Universal Time Code,

126
00:09:31.316 --> 00:09:36.410
offset, and
that is highlighted in pink on the slide,

127
00:09:36.410 --> 00:09:39.871
and it is in 15 minute increments.

128
00:09:41.090 --> 00:09:45.084
And we're going to talk
about how we translate that.

129
00:09:45.084 --> 00:09:47.611
It is a 7-bit signed value.

130
00:09:49.290 --> 00:09:54.963
So the time zone offset is
a 7-bit signed integer.

131
00:09:54.963 --> 00:10:02.387
And on the last slide, we saw that it
was a hexadecimal, EC was the value.

132
00:10:02.387 --> 00:10:07.403
Now, we know that we're going to
have 8 bits in this byte,

133
00:10:07.403 --> 00:10:10.652
so we break the byte out into binary.

134
00:10:10.652 --> 00:10:15.986
The most significant bit, the bit furthest
to the left, will get dropped and

135
00:10:15.986 --> 00:10:20.022
the bit to its right will become
the most significant bit.

136
00:10:20.022 --> 00:10:26.576
Because this is a signed integer, we know
it can be a positive or a negative number.

137
00:10:26.576 --> 00:10:32.033
And how we know it's a negative number is
the most significant bit is turned on,

138
00:10:32.033 --> 00:10:34.811
it's a 1, you can see it up here in red.

139
00:10:36.190 --> 00:10:43.590
So when we convert this to decimal,
that will be a negative number.

140
00:10:43.590 --> 00:10:48.959
So then the next thing you'd need to
do is put down your column values,

141
00:10:48.959 --> 00:10:53.236
you'd have 1, 2, 4, 8, 16, 32, and 64,

142
00:10:53.236 --> 00:10:56.626
because we're only using 7 of the 8 bits.

143
00:10:56.626 --> 00:11:01.981
We're not using the 128 value,
which would be to the left

144
00:11:01.981 --> 00:11:07.033
of the 64 if we had an 8 byte value,
but it's 7 bytes.

145
00:11:07.033 --> 00:11:13.355
So 64 is our highest value,
and it is a -64.

146
00:11:13.355 --> 00:11:20.472
So we'll drop our binary
values into the columns.

147
00:11:20.472 --> 00:11:25.106
And we have -64, we have positive 32,

148
00:11:25.106 --> 00:11:28.985
we have a 0 in the 16, 1 in the 8,

149
00:11:28.985 --> 00:11:33.511
1 in the 4, 0 in the 2, and 0 in the 1.

150
00:11:34.890 --> 00:11:40.980
So we need to add -64
plus 32 plus 8 plus 4,

151
00:11:40.980 --> 00:11:44.111
which gives us a -20.

152
00:11:45.590 --> 00:11:48.010
That is our value, decimal -20.

153
00:11:48.010 --> 00:11:51.397
But remember,
this is 15 second increments.

154
00:11:51.397 --> 00:11:58.290
So to get the total number of minutes,
we need to multiply -20 times 15.

155
00:11:58.290 --> 00:12:03.361
And when we do that,
we get a value of -300 for

156
00:12:03.361 --> 00:12:06.473
the total number of minutes.

157
00:12:06.473 --> 00:12:12.992
Now, to convert 300 minutes into hours,
you would divide -300 by 60.

158
00:12:12.992 --> 00:12:18.111
And when we divide 300 by 60,
we get a value of -5 hours.

159
00:12:19.389 --> 00:12:24.690
So the total number of hours
from UTC time would be -5.

160
00:12:24.690 --> 00:12:29.303
So it would be UTC minus 5 for
this particular time zone.

161
00:12:29.303 --> 00:12:32.701
And that is correct because
I did this in Central Time.

162
00:12:33.790 --> 00:12:42.034
Now, our stream extension entry is
a critical secondary directory entry.

163
00:12:42.034 --> 00:12:47.041
And its entry type is going to be
a hexadecimal C0 when it's in use and

164
00:12:47.041 --> 00:12:50.171
a hexadecimal 40 when it's not in use,

165
00:12:50.171 --> 00:12:54.211
meaning that the space is
available to be written to.

166
00:12:56.490 --> 00:13:04.887
We see our general secondary flags
in our next byte, hexadecimal 03.

167
00:13:04.887 --> 00:13:10.336
We'd break that out into binary and
we'd get a 1,

168
00:13:10.336 --> 00:13:15.034
1, a 1 and a 1, and a 1 and a 2 to make 3.

169
00:13:15.034 --> 00:13:18.351
And we could see the first value
is allocation possible, and

170
00:13:18.351 --> 00:13:22.790
that must always be a 1,
which means it's possible to be allocated.

171
00:13:22.790 --> 00:13:25.690
And then the second value
says not FAT chain,

172
00:13:25.690 --> 00:13:30.790
meaning it doesn't have a FAT chain,
and that is also turned on.

173
00:13:30.790 --> 00:13:36.184
So we know if it doesn't have a FAT chain,
it is not a fragmented file.

174
00:13:36.184 --> 00:13:38.709
So our file is not fragmented.

175
00:13:38.709 --> 00:13:40.719
Then we would have the name length,

176
00:13:40.719 --> 00:13:44.390
this is how many characters
are in the name of the file.

177
00:13:44.390 --> 00:13:49.290
And in our case, there are 25
characters in the name of the file.

178
00:13:49.290 --> 00:13:52.190
Then you have a name hash in hex.

179
00:13:52.190 --> 00:13:56.174
And then moving down,
we have a valid data length.

180
00:13:56.174 --> 00:13:59.601
What that means is that
is the initialized size.

181
00:14:00.690 --> 00:14:06.082
If you've ever downloaded a file,
your file system

182
00:14:06.082 --> 00:14:11.242
will save a certain amount of space for
that file.

183
00:14:11.242 --> 00:14:14.694
And if it does not download all the way,

184
00:14:14.694 --> 00:14:20.666
it may not take up all the size that
your file system reserved for it.

185
00:14:20.666 --> 00:14:24.511
And then your data length and
your initialized size could be different.

186
00:14:25.790 --> 00:14:28.818
But in our cases, they're not.

187
00:14:28.818 --> 00:14:35.741
So we see our first cluster is cluster 7,
and our data length is 4096.

188
00:14:35.741 --> 00:14:42.712
And the data length is
the actual size of the file.

189
00:14:42.712 --> 00:14:47.262
So that's how we would interpret
the stream extension entry.

190
00:14:47.262 --> 00:14:55.190
The file name directory entry is also
a critical secondary directory entry.

191
00:14:55.190 --> 00:15:00.368
You can have more than one of
these file name directory entries.

192
00:15:00.368 --> 00:15:05.301
Each entry can hold up to
15 Unicode characters.

193
00:15:07.790 --> 00:15:13.811
The entry type is going to be
a hexadecimal C1 when it's in use,

194
00:15:13.811 --> 00:15:18.729
and if it's not in use it
will be a hexadecimal 41.

195
00:15:18.729 --> 00:15:22.750
Then we would have our
general secondary flags.

196
00:15:22.750 --> 00:15:24.441
And again, it's a packed byte.

197
00:15:24.441 --> 00:15:28.940
In our case, it is 00,
you can see it highlighted in green.

198
00:15:28.940 --> 00:15:34.117
And what this means is
allocation possible,

199
00:15:34.117 --> 00:15:39.031
0, and then no FAT chain and it must be 0.

200
00:15:39.031 --> 00:15:42.690
You can see here both of
these values must be 0.

201
00:15:42.690 --> 00:15:49.042
And then underneath that we see our
file name and it is system volume.

202
00:15:51.425 --> 00:15:54.911
Now we're going to do a walkthrough
of our root directory and

203
00:15:54.911 --> 00:15:57.950
take a look at it with Active Disk Editor.

204
00:15:57.950 --> 00:16:01.058
And see how these values
are interpreted and

205
00:16:01.058 --> 00:16:04.000
what the director sets look like on disk.

206
00:16:04.000 --> 00:16:06.258
The items were going to need for

207
00:16:06.258 --> 00:16:10.971
this walkthrough our
Active Disk Editor and our exFAT VHD.

208
00:16:12.950 --> 00:16:15.561
Okay let's start our walkthrough.

209
00:16:15.561 --> 00:16:22.571
To start our walk through, the first thing
we have to do is attach our exFAT VHD.

210
00:16:23.750 --> 00:16:28.533
So we're going to go to actions,
attach VHD,

211
00:16:28.533 --> 00:16:33.750
navigate to where we saved our ex fat VHD.

212
00:16:33.750 --> 00:16:35.390
My end is on my desktop.

213
00:16:35.390 --> 00:16:42.260
I'm going to select it and hit open and
then I'm going to go ahead and click okay.

214
00:16:42.260 --> 00:16:45.095
And my VHD will mount.

215
00:16:45.095 --> 00:16:50.585
Once your VHD mounts,
make sure you make note

216
00:16:50.585 --> 00:16:55.500
of the disk number and the drive letter.

217
00:16:55.500 --> 00:17:01.150
Mine is disk 13, drive letter F.

218
00:17:01.150 --> 00:17:08.074
Yours will probably be different than
mine but note the volume letter.

219
00:17:08.074 --> 00:17:13.814
Now launch Active Disk Editor.

220
00:17:13.814 --> 00:17:18.461
Once Active Disk Editor launches, we're
going to go ahead and select open disk.

221
00:17:20.050 --> 00:17:23.911
Once that opens we're
going to go to volumes.

222
00:17:23.911 --> 00:17:29.543
Now we're going to
select our exFAT volume.

223
00:17:29.543 --> 00:17:34.033
Mine was F yours will probably
be a different drive letter and

224
00:17:34.033 --> 00:17:35.977
we're going to click open.

225
00:17:35.977 --> 00:17:41.471
And we can see it will take
us to the volume boot record.

226
00:17:42.650 --> 00:17:47.150
And we talked about that
in our last module.

227
00:17:47.150 --> 00:17:51.997
I want you to go ahead and
click on this button up top here next to

228
00:17:51.997 --> 00:17:55.181
unicode that says browse file records.

229
00:17:58.350 --> 00:18:02.930
Now when this opens up, we can see
we have some file records up here.

230
00:18:02.930 --> 00:18:07.971
We have our bit map, we have our up
case and we have our volume label.

231
00:18:09.650 --> 00:18:12.000
We also have the root folder.

232
00:18:12.000 --> 00:18:16.150
First one we want to take
a look at is the bit map.

233
00:18:16.150 --> 00:18:20.600
This is our bit map directory entry and
we talked about that.

234
00:18:20.600 --> 00:18:27.950
It starts with a hexi decimal
8.1 which tells us our type.

235
00:18:27.950 --> 00:18:33.661
So we know we are looking at
a bit map directory entry.

236
00:18:36.050 --> 00:18:42.774
Then we have a 00 next to that which
tells us the secondary entry counts and

237
00:18:42.774 --> 00:18:47.913
there are none because this
is a bit map directory entry.

238
00:18:47.913 --> 00:18:51.631
Then we have our first cluster offset 14.

239
00:18:51.631 --> 00:18:55.843
So we'd go down line,
one line in over four and

240
00:18:55.843 --> 00:19:03.650
this tells us where our first cluster
is and our first cluster is cluster 2.

241
00:19:03.650 --> 00:19:06.950
So our bit map starts in cluster 2.

242
00:19:06.950 --> 00:19:12.001
And then it's going to tell us the size,
how big is our bit map,

243
00:19:12.001 --> 00:19:17.371
our data length and
we can see our data length is 5816 bytes.

244
00:19:22.050 --> 00:19:26.671
Now let's take a look at
the volume label directory entry.

245
00:19:27.750 --> 00:19:30.305
This is our volume label
directory entry and

246
00:19:30.305 --> 00:19:32.870
again this is a user created volume label.

247
00:19:32.870 --> 00:19:37.921
If the user did not create a volume label,
you would just see all

248
00:19:37.921 --> 00:19:44.050
zeros on the hex here but we did
create a volume label so we have one.

249
00:19:44.050 --> 00:19:47.771
Again, this tells us the type of entry.

250
00:19:49.150 --> 00:19:52.252
The next bite over is going to
tell us the character count,

251
00:19:52.252 --> 00:19:54.761
how many characters
are in the volume label.

252
00:19:55.950 --> 00:19:58.561
And again this is expressed in unicode.

253
00:19:59.750 --> 00:20:02.510
If you look to the right,

254
00:20:02.510 --> 00:20:07.514
you can see that it's
expressed in unicode.

255
00:20:07.514 --> 00:20:12.185
Then we actually have the volume label and

256
00:20:12.185 --> 00:20:15.400
it is five characters long.

257
00:20:15.400 --> 00:20:20.484
Our next entry,
we'll take a look at will be our up case.

258
00:20:20.484 --> 00:20:26.428
Our up case entry, we start with
the entry type which is a hex 82.

259
00:20:26.428 --> 00:20:34.571
Moving over,
we have our reserved bites in green here.

260
00:20:36.050 --> 00:20:39.471
Now we have our checksum for
error checking.

261
00:20:41.750 --> 00:20:45.285
We have more reserved bites and
then we have the location of it,

262
00:20:45.285 --> 00:20:46.431
our first cluster.

263
00:20:46.431 --> 00:20:50.150
And we can see that it
starts in cluster four.

264
00:20:50.150 --> 00:20:55.300
This is where up case table will start and
then we have the size of

265
00:20:55.300 --> 00:21:00.850
our up case table, the data length and
that is 5836 bites.

266
00:21:00.850 --> 00:21:05.771
Now let's take a look at the directory
entries for we have two files up here.

267
00:21:07.250 --> 00:21:11.735
So let's start with long file named TXT.

268
00:21:11.735 --> 00:21:19.471
And we can see we have our hex 85
which this would be our entry type.

269
00:21:20.650 --> 00:21:23.280
Now, how many entries
are in our directory set?

270
00:21:23.280 --> 00:21:26.338
We have three entries
in our directory set.

271
00:21:26.338 --> 00:21:28.250
It's the secondary count.

272
00:21:28.250 --> 00:21:30.171
There's a check sum for error checking.

273
00:21:31.350 --> 00:21:35.469
Our file attributes are 20.

274
00:21:35.469 --> 00:21:37.221
Again, this is red little Indian.

275
00:21:39.150 --> 00:21:45.585
So let's go take a look and
expand file attributes and

276
00:21:45.585 --> 00:21:50.460
take a look at which attributes are set.

277
00:21:50.460 --> 00:21:54.950
And we can see that we have
in archive attribute set.

278
00:21:54.950 --> 00:21:56.750
So this is an archive.

279
00:21:56.750 --> 00:22:02.571
We have a creation date and time,
less modified date and time.

280
00:22:05.850 --> 00:22:08.761
Last access date and a time [INAUDIBLE].

281
00:22:11.250 --> 00:22:16.058
We have our creation 10 millisecond

282
00:22:16.058 --> 00:22:20.750
offset which can be 0 to 199.

283
00:22:20.750 --> 00:22:24.420
In our case it is 190.

284
00:22:24.420 --> 00:22:30.100
Then we have our time zone offset.

285
00:22:30.100 --> 00:22:34.471
This is the created time zone offset.

286
00:22:36.350 --> 00:22:40.461
This would be the last
modified time zone offset

287
00:22:40.461 --> 00:22:43.661
in the last access time zone offset.

288
00:22:43.661 --> 00:22:48.590
And we talked about how we would
need to translate this bite.

289
00:22:48.590 --> 00:22:53.049
It's a seven bit signed integer so
you need to convert it to binary,

290
00:22:53.049 --> 00:22:55.750
you're going to get eight bytes.

291
00:22:55.750 --> 00:22:59.133
You would drop the bite
furthest to the left,

292
00:22:59.133 --> 00:23:03.951
the 8th bit coz it's only a seven
bites that we're looking at.

293
00:23:03.951 --> 00:23:08.811
And because it's a signed integer,
if that seventh bit, it's a one.

294
00:23:08.811 --> 00:23:12.871
If it's turned on,
that would be a negative number.

295
00:23:13.950 --> 00:23:17.512
Like we talked about in
the power point presentation and

296
00:23:17.512 --> 00:23:20.561
then the last of these
bites are just reserved.

297
00:23:23.250 --> 00:23:27.650
So that is the directory entry for
this file.

298
00:23:27.650 --> 00:23:32.350
But we know we have three
in the directory set.

299
00:23:32.350 --> 00:23:40.750
So moving down,
we now have a directory stream name.

300
00:23:40.750 --> 00:23:46.184
We can see the type is hexi decimal C0,
which is the type for

301
00:23:46.184 --> 00:23:50.770
our stream name,
extend stream name attribute.

302
00:23:50.770 --> 00:23:55.855
Next we have our Secondary Flags And

303
00:23:55.855 --> 00:24:01.721
we can see we have a hex
to decimal value of 03 So

304
00:24:01.721 --> 00:24:05.388
we go ahead and use are flags,

305
00:24:05.388 --> 00:24:10.523
we can see that allocation is possible but

306
00:24:10.523 --> 00:24:16.098
that must always be a one
as we talked about and

307
00:24:16.098 --> 00:24:18.920
there is no fat chain.

308
00:24:18.920 --> 00:24:24.013
So this is Not a fragmented
file because the value is one

309
00:24:24.013 --> 00:24:30.451
We have reserved by then we have
the name length, how big the name is.

310
00:24:30.451 --> 00:24:33.270
The name is 12 characters.

311
00:24:33.270 --> 00:24:35.360
Hexi decimal 10.

312
00:24:35.360 --> 00:24:39.381
Which would Translate to
decimal 18 characters long.

313
00:24:41.860 --> 00:24:47.271
Next we have our name
hash in hexi decimal.

314
00:24:50.260 --> 00:24:52.563
Next we have valid data length and

315
00:24:52.563 --> 00:24:56.521
we talked about that is
the initialized size of the file.

316
00:24:59.060 --> 00:25:03.835
Now we have our first
cluster location moving down

317
00:25:03.835 --> 00:25:09.071
started with hexi decimal
zero D highlighted in pink.

318
00:25:10.960 --> 00:25:16.100
We have our starting cluster and
we can see it is zero D.

319
00:25:16.100 --> 00:25:21.357
This is red little indian and
that would give us a hexi decimal

320
00:25:21.357 --> 00:25:26.716
13 as the first cluster and
then we have the length of the data

321
00:25:26.716 --> 00:25:32.060
which is the husks of decimal
26 Which gives us a 38.

322
00:25:32.060 --> 00:25:34.281
So it's 38 clusters.

323
00:25:38.160 --> 00:25:43.960
Moving down to our next entry
in our directory entry set.

324
00:25:43.960 --> 00:25:49.760
We have a value of C1, you can go ahead
and right click and set template position.

325
00:25:49.760 --> 00:25:56.881
So you can follow along, We have our
C1 which we know is our file name.

326
00:25:58.050 --> 00:26:02.281
This would be our file name entry
in our directory entry set.

327
00:26:05.760 --> 00:26:11.153
We can have more than one of these so
keep that in mind and

328
00:26:11.153 --> 00:26:16.546
here is our file name and
as we can see it is in unicode and

329
00:26:16.546 --> 00:26:21.240
you can tell it's unicode
Because you have that

330
00:26:21.240 --> 00:26:26.060
padding of 00 between the characters.

331
00:26:26.060 --> 00:26:31.036
And if we look to the left and
the askey and in the unicode we

332
00:26:31.036 --> 00:26:36.131
can see that we do have those
dots in the middle as padding.

333
00:26:37.460 --> 00:26:40.371
So this is written in unicode not asking.

334
00:26:43.760 --> 00:26:46.720
And we do have more than one file name.

335
00:26:46.720 --> 00:26:52.206
Directory actually because if
you go down and go ahead and

336
00:26:52.206 --> 00:26:56.665
set right, click and
set template position,

337
00:26:56.665 --> 00:27:03.081
we have a second entry here for
the file name and it just has the TXT.

338
00:27:07.760 --> 00:27:12.216
So this directory entry set has to

339
00:27:12.216 --> 00:27:17.001
file names in it to file in entries.

340
00:27:18.860 --> 00:27:21.960
And then below that we have
something interesting.

341
00:27:21.960 --> 00:27:27.565
We have something that
starts with a 05 and

342
00:27:27.565 --> 00:27:32.715
we talked about directory entry sets and

343
00:27:32.715 --> 00:27:38.016
we talked about the directory entry going

344
00:27:38.016 --> 00:27:45.285
back to our 85 If this were
a not in use it would be a 05 So

345
00:27:45.285 --> 00:27:50.911
this is a directory entry
that is not in use.

346
00:27:52.350 --> 00:27:56.751
We're going to talk more about when we
talk about recovering deleted files.

347
00:27:56.751 --> 00:28:00.421
This is a directory entry for
deleted file and

348
00:28:00.421 --> 00:28:05.260
you can see For
the directory entry, it has a 05.

349
00:28:05.260 --> 00:28:09.078
If we go down And
we look at the stream extension,

350
00:28:09.078 --> 00:28:11.840
it has a 40 and then we go down.

351
00:28:11.840 --> 00:28:15.360
We can see that the file name has a 41.

352
00:28:15.360 --> 00:28:19.771
So this is a completely
deleted directory entry set.

353
00:28:23.160 --> 00:28:28.135
And we'll talk about this
in our next block when we

354
00:28:28.135 --> 00:28:31.332
talk about the leading files and

355
00:28:31.332 --> 00:28:37.381
what those entries look like and
how we would recover files.