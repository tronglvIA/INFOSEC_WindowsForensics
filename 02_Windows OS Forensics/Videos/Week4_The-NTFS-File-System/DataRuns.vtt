WEBVTT

1
00:00:00.000 --> 00:00:02.760
We're in course 9.

2
00:00:02.760 --> 00:00:06.225
We're talking about
the NTFS file system.

3
00:00:06.225 --> 00:00:07.920
In this module, we're going to be

4
00:00:07.920 --> 00:00:10.410
talking about data runs.

5
00:00:10.410 --> 00:00:12.120
In our last module,

6
00:00:12.120 --> 00:00:17.505
we took a look at the data
attribute in a file record.

7
00:00:17.505 --> 00:00:21.165
The one we looked
at was resident.

8
00:00:21.165 --> 00:00:23.565
We saw the attribute type.

9
00:00:23.565 --> 00:00:28.710
We talked that hexadecimal
80 is a data attribute.

10
00:00:28.710 --> 00:00:32.830
We find this within
a file record.

11
00:00:33.380 --> 00:00:38.235
Right after that, we see the
length of the attribute.

12
00:00:38.235 --> 00:00:45.015
Hexadecimal 48 is the number
of bytes in the attribute.

13
00:00:45.015 --> 00:00:51.015
Next, we see the resident,
non-resident flag.

14
00:00:51.015 --> 00:00:54.460
It's technically called
the non-resident flag

15
00:00:54.460 --> 00:00:56.460
and we can see here is

16
00:00:56.460 --> 00:00:58.710
00 so the flag is not

17
00:00:58.710 --> 00:01:03.460
flying so this would be a
resident data attribute.

18
00:01:03.920 --> 00:01:09.525
Then we can move over to
hexadecimal 1C over here.

19
00:01:09.525 --> 00:01:13.500
We can see the offset to

20
00:01:13.500 --> 00:01:14.790
the data from the start of

21
00:01:14.790 --> 00:01:18.220
the attribute and
that would be 18.

22
00:01:18.220 --> 00:01:20.945
We go down one line and over

23
00:01:20.945 --> 00:01:22.460
eight bytes and
that would take us

24
00:01:22.460 --> 00:01:24.445
to the start of our data.

25
00:01:24.445 --> 00:01:26.010
We can see this is

26
00:01:26.010 --> 00:01:29.170
an example of a resident data

27
00:01:29.170 --> 00:01:31.850
attribute written in the ASCII.

28
00:01:32.090 --> 00:01:34.530
This is how we would read

29
00:01:34.530 --> 00:01:39.025
a resident data attributes
within a file record entry.

30
00:01:39.025 --> 00:01:42.250
Now, for a non-resident
data attribute,

31
00:01:42.250 --> 00:01:44.155
you're going to have the
same thing in the header.

32
00:01:44.155 --> 00:01:45.890
You're going to have
the attribute type.

33
00:01:45.890 --> 00:01:48.345
You're going to have the
length of the attribute.

34
00:01:48.345 --> 00:01:51.295
When we get to the
non-resident flag,

35
00:01:51.295 --> 00:01:53.785
we see that that flag is up.

36
00:01:53.785 --> 00:01:55.565
It's a 01.

37
00:01:55.565 --> 00:01:57.910
This indicates to us that this is

38
00:01:57.910 --> 00:02:00.205
a non-resident data attribute

39
00:02:00.205 --> 00:02:02.050
and that the data
for this file is

40
00:02:02.050 --> 00:02:04.990
located not within the
MFT record itself,

41
00:02:04.990 --> 00:02:07.460
but somewhere out on the drive.

42
00:02:07.460 --> 00:02:11.150
Next, we need to
find the offset to

43
00:02:11.150 --> 00:02:15.160
the data from the start
of the attribute.

44
00:02:15.160 --> 00:02:17.955
We can see right here,

45
00:02:17.955 --> 00:02:24.155
we go down two lines and we
can see that this offset,

46
00:02:24.155 --> 00:02:26.585
we have a hexadecimal 40.

47
00:02:26.585 --> 00:02:31.145
That tells us that our data run,

48
00:02:31.145 --> 00:02:33.770
or where we can find the
location for the data out on

49
00:02:33.770 --> 00:02:34.820
the drive is going to be

50
00:02:34.820 --> 00:02:37.665
four lines down from the
start of the attribute.

51
00:02:37.665 --> 00:02:41.225
We count four lines down, 1, 2,

52
00:02:41.225 --> 00:02:45.310
3, 4, and this takes
us to our data run.

53
00:02:45.310 --> 00:02:49.500
Now, our data run
contains a run list.

54
00:02:49.500 --> 00:02:51.335
We're going to take
a very good look

55
00:02:51.335 --> 00:02:52.880
at the data run itself.

56
00:02:52.880 --> 00:02:54.200
The first byte in

57
00:02:54.200 --> 00:02:57.480
the data run is what's
called a run header.

58
00:02:57.530 --> 00:03:00.020
We interpret that by splitting it

59
00:03:00.020 --> 00:03:01.730
into two nibbles
and then adding it

60
00:03:01.730 --> 00:03:03.620
together to get the total number

61
00:03:03.620 --> 00:03:05.375
of bytes in our data run.

62
00:03:05.375 --> 00:03:06.860
If we add two and one,

63
00:03:06.860 --> 00:03:08.335
we come up with three.

64
00:03:08.335 --> 00:03:12.045
That tells us our data
run is three bytes long.

65
00:03:12.045 --> 00:03:15.765
The first right here, the one,

66
00:03:15.765 --> 00:03:20.385
our left nibble represents

67
00:03:20.385 --> 00:03:27.930
this number one right here
represents hexadecimal 55.

68
00:03:27.930 --> 00:03:32.400
This is the length in
clusters of our data run.

69
00:03:32.400 --> 00:03:35.565
The decimal, the nibble 2,

70
00:03:35.565 --> 00:03:42.280
the far left nibble represents
the starting cluster.

71
00:03:43.850 --> 00:03:47.050
The starting cluster is
going to be over here,

72
00:03:47.050 --> 00:03:49.920
and it's going to be 8B,

73
00:03:49.920 --> 00:03:54.735
05, but it will be read
little-endian so it'd be 05, 8B.

74
00:03:54.735 --> 00:03:57.255
Tells us our starting cluster.

75
00:03:57.255 --> 00:03:59.580
Then when you get to all zeros,

76
00:03:59.580 --> 00:04:02.290
you're at the end
of your data run.

77
00:04:02.720 --> 00:04:05.930
Here, we have a visual of
what I was talking about.

78
00:04:05.930 --> 00:04:08.870
We have our run list header
split into two nibbles.

79
00:04:08.870 --> 00:04:12.875
The two and the one, we
add 2 plus 1, we get 3.

80
00:04:12.875 --> 00:04:17.240
The one, the right nibble

81
00:04:17.240 --> 00:04:20.630
represents the size,
how many clusters?

82
00:04:20.630 --> 00:04:23.600
The left nibble represents what's

83
00:04:23.600 --> 00:04:26.980
called the starting extent
or the starting cluster.

84
00:04:26.980 --> 00:04:30.810
That represents these
two bytes here.

85
00:04:30.810 --> 00:04:36.040
The 8B and the 05 tell
us the starting cluster.

86
00:04:37.130 --> 00:04:40.155
We split it into two nibbles.

87
00:04:40.155 --> 00:04:43.500
The right nibble
represents the size;

88
00:04:43.500 --> 00:04:48.105
the first byte in the data run.

89
00:04:48.105 --> 00:04:53.215
The left nibble is two so
we know we need two bytes.

90
00:04:53.215 --> 00:04:56.530
That represents the next
two bytes in our data run,

91
00:04:56.530 --> 00:04:59.590
and that tells us the
starting cluster.

92
00:04:59.870 --> 00:05:02.570
We're going to go ahead
and take a look at

93
00:05:02.570 --> 00:05:05.075
this in Active Disk Editor.

94
00:05:05.075 --> 00:05:07.215
The items we're going to
need for this walk-through,

95
00:05:07.215 --> 00:05:09.365
we're going to need
active disk editor,

96
00:05:09.365 --> 00:05:12.980
we're going to need our NTFS VHD,

97
00:05:12.980 --> 00:05:15.125
and we're going to need
a Windows calculator,

98
00:05:15.125 --> 00:05:18.110
or any type of calculator
will work just fine.

99
00:05:18.110 --> 00:05:20.690
The first thing we're
going to need to do for

100
00:05:20.690 --> 00:05:23.515
our walk-through
is attach our VHD.

101
00:05:23.515 --> 00:05:26.670
We're going to bring
up Disk Management.

102
00:05:26.670 --> 00:05:29.150
We're going to go to Actions.

103
00:05:29.150 --> 00:05:38.600
Attach VHD, navigate out to
where our NTFS.vhd stored.

104
00:05:38.600 --> 00:05:41.545
Select it and click "Open".

105
00:05:41.545 --> 00:05:46.180
Then click "Okay" and
our VHD will mount.

106
00:05:46.180 --> 00:05:50.170
As before, make sure you
know the disk number,

107
00:05:50.170 --> 00:05:52.525
the volume that we're
going to be working with

108
00:05:52.525 --> 00:05:54.805
is the second volume
in on the drive,

109
00:05:54.805 --> 00:05:57.460
the first NTFS volume

110
00:05:57.460 --> 00:06:00.985
on my computer it's B on
yours it may be different,

111
00:06:00.985 --> 00:06:03.835
and the size is 200 megabytes,

112
00:06:03.835 --> 00:06:07.660
and the volume label is NTFS.

113
00:06:07.660 --> 00:06:11.930
Let's go ahead and start
Active Disk Editor.

114
00:06:13.350 --> 00:06:16.910
We're going to
select "Open Disk".

115
00:06:17.370 --> 00:06:23.950
We're going to select "Volumes",

116
00:06:23.950 --> 00:06:26.005
and then we're going to select

117
00:06:26.005 --> 00:06:33.295
our NTFS volume then we're
going to click "Open".

118
00:06:33.295 --> 00:06:35.380
Again we're going
to be brought to

119
00:06:35.380 --> 00:06:37.475
the volume boot record.

120
00:06:37.475 --> 00:06:40.740
Let's take a quick look
in the volume boot record

121
00:06:40.740 --> 00:06:44.060
at our sectors per cluster,

122
00:06:44.060 --> 00:06:50.345
which is eight in our bytes
per sector, which are 512.

123
00:06:50.345 --> 00:06:53.545
If we multiply 8 times 512,

124
00:06:53.545 --> 00:06:57.860
we get 4,096 bytes in a cluster.

125
00:06:59.820 --> 00:07:04.460
Let's go to Browse File Records.

126
00:07:04.590 --> 00:07:08.590
Scroll down and let's take a look

127
00:07:08.590 --> 00:07:12.650
at this resident.txt first.

128
00:07:12.660 --> 00:07:16.760
We looked at this
file record before,

129
00:07:20.790 --> 00:07:23.125
we noticed the header.

130
00:07:23.125 --> 00:07:24.850
We see it says file,

131
00:07:24.850 --> 00:07:28.990
so we know we're looking
at MFT file record.

132
00:07:28.990 --> 00:07:31.910
We see the ASCII file.

133
00:07:34.020 --> 00:07:38.650
Now we can see our attributes
within the file record.

134
00:07:38.650 --> 00:07:41.720
We have our standard
information attribute,

135
00:07:41.730 --> 00:07:45.234
and we parse that
in the last module.

136
00:07:45.234 --> 00:07:50.980
We have our filename
attribute, hexadecimal 30.

137
00:07:51.840 --> 00:07:56.570
We talked about our
object ID attribute,

138
00:07:56.790 --> 00:08:01.040
and now we have our
data attribute.

139
00:08:01.290 --> 00:08:03.970
The first part of
our attribute is

140
00:08:03.970 --> 00:08:06.190
actually called an
attribute header.

141
00:08:06.190 --> 00:08:09.460
It tells us the type
of attribute we have.

142
00:08:09.460 --> 00:08:11.410
It tells us the size,

143
00:08:11.410 --> 00:08:13.870
the length of the attribute,

144
00:08:13.870 --> 00:08:18.805
and right here is our
non-resident flag.

145
00:08:18.805 --> 00:08:22.195
In this particular file,

146
00:08:22.195 --> 00:08:25.660
we see that our non-resident
flag is not up,

147
00:08:25.660 --> 00:08:30.850
so this indicates to us that
this is flat resident file,

148
00:08:30.850 --> 00:08:34.760
because the non-resident
flag is not set.

149
00:08:36.900 --> 00:08:45.760
This will tell us our offset
to the attribute data.

150
00:08:45.760 --> 00:08:48.025
Right here outlined in pink,

151
00:08:48.025 --> 00:08:50.875
this is the offset to
the attribute data.

152
00:08:50.875 --> 00:08:55.435
You go down one line
and over eight bytes,

153
00:08:55.435 --> 00:08:59.170
and that will take us to the
start of our attribute data.

154
00:08:59.170 --> 00:09:03.865
We can see this file is resident.

155
00:09:03.865 --> 00:09:08.170
It's a very small file and
it's able to fit right inside

156
00:09:08.170 --> 00:09:10.850
the master file table record

157
00:09:11.790 --> 00:09:15.860
and that would be
a resident file.

158
00:09:17.580 --> 00:09:21.220
Now let's go back
up to the top and

159
00:09:21.220 --> 00:09:24.950
take a look at Non_Resident.pdf.

160
00:09:25.830 --> 00:09:31.345
Again, we have our
attribute header

161
00:09:31.345 --> 00:09:33.565
which starts with
the ASCII Word file.

162
00:09:33.565 --> 00:09:35.710
We can see file that tells you

163
00:09:35.710 --> 00:09:38.870
you're looking at
MFT file record.

164
00:09:40.560 --> 00:09:43.510
The first attribute will

165
00:09:43.510 --> 00:09:46.375
be the standard
information attribute,

166
00:09:46.375 --> 00:09:50.950
and this is what gives us
all our times created,

167
00:09:50.950 --> 00:09:56.005
modified, record changed,
and last access.

168
00:09:56.005 --> 00:09:58.750
Then we have our
filename attribute,

169
00:09:58.750 --> 00:10:01.780
and hexadecimal 30 indicates

170
00:10:01.780 --> 00:10:08.304
a file name attribute has
the length of the attribute.

171
00:10:08.304 --> 00:10:13.120
The non-resident flag and
this will be resident.

172
00:10:14.490 --> 00:10:17.870
Then we have the data.

173
00:10:18.530 --> 00:10:21.850
The start of our attribute.

174
00:10:23.520 --> 00:10:27.060
We can see the file name down

175
00:10:27.060 --> 00:10:32.440
here and it is Non_Resident.pdf.

176
00:10:34.790 --> 00:10:40.560
Now we do have an attribute 40,

177
00:10:40.560 --> 00:10:44.595
which is an object ID attribute,

178
00:10:44.595 --> 00:10:46.395
which will give us right here

179
00:10:46.395 --> 00:10:48.555
that globally unique identifier,

180
00:10:48.555 --> 00:10:50.980
that GUID for the file.

181
00:10:51.860 --> 00:10:55.515
That's an object ID attribute.

182
00:10:55.515 --> 00:10:58.800
Just below that,
working our way down,

183
00:10:58.800 --> 00:11:02.775
we have our hexadecimal
80 attribute,

184
00:11:02.775 --> 00:11:05.520
which is our data attribute.

185
00:11:05.520 --> 00:11:08.430
Now this will either
contain the data like

186
00:11:08.430 --> 00:11:10.995
it did in our resident.txt,

187
00:11:10.995 --> 00:11:14.610
or it'll tell us where the
data is out on the drive.

188
00:11:14.610 --> 00:11:18.120
We have the type of attribute,

189
00:11:18.120 --> 00:11:20.400
the length of the attribute,

190
00:11:20.400 --> 00:11:22.650
and our non-resident flag.

191
00:11:22.650 --> 00:11:26.115
We can see our
non-resident flag is 01,

192
00:11:26.115 --> 00:11:29.400
that means our flag
is flying and this is

193
00:11:29.400 --> 00:11:32.685
a non-resident data attribute.

194
00:11:32.685 --> 00:11:37.170
The data for this file is
going to be out on the drive.

195
00:11:37.170 --> 00:11:41.130
Just keep in mind, we're
looking at file records.

196
00:11:41.130 --> 00:11:44.610
These give us information
about the file.

197
00:11:44.610 --> 00:11:46.755
The data can be resident,

198
00:11:46.755 --> 00:11:50.775
but most likely the data
attribute will be non-resident,

199
00:11:50.775 --> 00:11:55.300
unless you have a very
small file that will fit.

200
00:11:55.790 --> 00:11:57.900
Now we have to navigate

201
00:11:57.900 --> 00:12:01.570
this attribute and
find our data run.

202
00:12:04.100 --> 00:12:06.975
We go two lines down to find

203
00:12:06.975 --> 00:12:10.410
the location of our
offset to the data run.

204
00:12:10.410 --> 00:12:12.975
From the beginning
of the attribute,

205
00:12:12.975 --> 00:12:14.940
you go down two lines,

206
00:12:14.940 --> 00:12:18.420
and that will tell you where
the data run is located.

207
00:12:18.420 --> 00:12:19.980
This gives us the offset to

208
00:12:19.980 --> 00:12:22.635
the data run as hexadecimal 40.

209
00:12:22.635 --> 00:12:26.490
That means four lines
down from the start of

210
00:12:26.490 --> 00:12:30.150
the attribute will
give us our data run.

211
00:12:30.150 --> 00:12:34.365
You count down one,
two, three, four.

212
00:12:34.365 --> 00:12:37.420
This is our first data run.

213
00:12:37.460 --> 00:12:40.845
We can see it is a 2 and a 1.

214
00:12:40.845 --> 00:12:42.615
Remember the data run header,

215
00:12:42.615 --> 00:12:45.495
we have to split this
byte into two nibbles.

216
00:12:45.495 --> 00:12:49.115
The 1, the right side,

217
00:12:49.115 --> 00:12:52.115
relates to the byte
directly next to it,

218
00:12:52.115 --> 00:12:54.205
directly to the right of it.

219
00:12:54.205 --> 00:12:56.984
This indicates the size,

220
00:12:56.984 --> 00:12:59.100
and in this case,
it is one cluster.

221
00:12:59.100 --> 00:13:01.360
It gives us the cluster count.

222
00:13:02.090 --> 00:13:09.150
The 2 represents where
the starting cluster is,

223
00:13:09.150 --> 00:13:12.270
and we know it's two bytes
long because it's a 2.

224
00:13:12.270 --> 00:13:16.395
We knew the size was one
byte long because it's a 1.

225
00:13:16.395 --> 00:13:25.785
The 2 represents the next two
bytes in the data run list.

226
00:13:25.785 --> 00:13:27.630
These two bytes indicate where

227
00:13:27.630 --> 00:13:31.350
the first cluster
for this file is.

228
00:13:31.350 --> 00:13:33.870
They're read little-endian.

229
00:13:33.870 --> 00:13:39.280
I'm going to swipe
them right to left,

230
00:13:40.340 --> 00:13:44.949
and I'm going to look
at my Data Interpreter.

231
00:13:45.230 --> 00:13:48.105
I have a 16-bit,

232
00:13:48.105 --> 00:13:51.540
and remember these
are signed values.

233
00:13:51.540 --> 00:13:54.720
It's a 16-bit signed value.

234
00:13:54.720 --> 00:13:59.625
We have a number of 17,065.

235
00:13:59.625 --> 00:14:03.040
Now I'm going to need
my Windows calculator,

236
00:14:03.320 --> 00:14:08.680
and I'm going to put in 17,065.

237
00:14:13.640 --> 00:14:16.530
I'm just going to
leave that be for now.

238
00:14:16.530 --> 00:14:20.160
That's where it starts and
it's one cluster long.

239
00:14:20.160 --> 00:14:22.050
This is a part of it.

240
00:14:22.050 --> 00:14:25.005
This file is fragmented.

241
00:14:25.005 --> 00:14:27.555
We have four data runs here,

242
00:14:27.555 --> 00:14:31.350
one, two, three, four.

243
00:14:31.350 --> 00:14:33.840
This is our next data run.

244
00:14:33.840 --> 00:14:36.885
The first byte is
the data run header.

245
00:14:36.885 --> 00:14:39.150
It tells us the
length of the run.

246
00:14:39.150 --> 00:14:41.310
We split it into two nibbles,

247
00:14:41.310 --> 00:14:43.290
and 2 and 1 is 3,

248
00:14:43.290 --> 00:14:48.220
so my data run is
three bytes long.

249
00:14:48.740 --> 00:14:53.610
The right nibble is
a 1 that tells me

250
00:14:53.610 --> 00:14:58.409
the size in clusters
of my data run,

251
00:14:58.409 --> 00:15:01.170
and that 1 refers to

252
00:15:01.170 --> 00:15:04.075
the bytes directly
to the right of it.

253
00:15:04.075 --> 00:15:07.265
I have a 09 for a cluster count,

254
00:15:07.265 --> 00:15:11.110
so this data run is
nine clusters long.

255
00:15:11.110 --> 00:15:14.310
Now let me look at the
left nibble, it's a 2.

256
00:15:14.310 --> 00:15:18.940
It tells me my starting
cluster is two bytes long.

257
00:15:18.940 --> 00:15:22.330
I look to the next two
bytes in my data run,

258
00:15:22.330 --> 00:15:25.035
and I read them little-endian.

259
00:15:25.035 --> 00:15:28.845
I read it BF, BF.

260
00:15:28.845 --> 00:15:32.880
That is a 16-bit signed integer.

261
00:15:32.880 --> 00:15:34.500
When you have a signed integer,

262
00:15:34.500 --> 00:15:38.280
it is possible to have
a negative number if

263
00:15:38.280 --> 00:15:43.950
the most significant bit is on.

264
00:15:43.950 --> 00:15:46.560
With a B, the most
significant bit

265
00:15:46.560 --> 00:15:49.260
will be on because it's
greater than eight.

266
00:15:49.260 --> 00:15:59.410
My 16-bit signed value
is negative 16,449.

267
00:16:00.350 --> 00:16:03.790
I'm going to bring my calculator,

268
00:16:05.120 --> 00:16:09.340
and I'm going to subtract 16,449.

269
00:16:17.370 --> 00:16:23.180
That's going to give me 616.

270
00:16:23.640 --> 00:16:26.260
When I look at my data run,

271
00:16:26.260 --> 00:16:28.615
I can see, yes,

272
00:16:28.615 --> 00:16:35.065
it is telling me the first
part is in cluster 17,065,

273
00:16:35.065 --> 00:16:40.390
and the second part
is in cluster 616,

274
00:16:40.390 --> 00:16:45.115
which is what I got when I
translate it by data run.

275
00:16:45.115 --> 00:16:48.130
That is where the second
chunk of our file would

276
00:16:48.130 --> 00:16:52.280
be and this run is
nine clusters long.

277
00:16:52.550 --> 00:16:57.190
Let's look at the next
piece of our data run.

278
00:16:59.100 --> 00:17:01.780
Again, I have my data run

279
00:17:01.780 --> 00:17:04.960
header and again it
is a two and a one.

280
00:17:04.960 --> 00:17:09.474
The one represents
the size and clusters

281
00:17:09.474 --> 00:17:13.630
and it refers to
the byte or bytes,

282
00:17:13.630 --> 00:17:14.890
if that was a two, we will refer

283
00:17:14.890 --> 00:17:16.405
to the two bytes to the right,

284
00:17:16.405 --> 00:17:20.815
but it's a one so it refers
to the one byte to the right,

285
00:17:20.815 --> 00:17:22.525
which is the cluster count.

286
00:17:22.525 --> 00:17:25.460
Just hexadecimal 10.

287
00:17:27.420 --> 00:17:32.230
The two refers to

288
00:17:32.230 --> 00:17:35.340
the starting extent where

289
00:17:35.340 --> 00:17:38.915
I have to go next to find
the piece of this file.

290
00:17:38.915 --> 00:17:42.280
It says it's two
bytes in length and I

291
00:17:42.280 --> 00:17:46.969
know it's to the
right of the length.

292
00:17:47.310 --> 00:17:53.110
It's red little endian
so this is 01, 5A.

293
00:17:53.110 --> 00:17:55.570
When I translate 01,

294
00:17:55.570 --> 00:18:04.580
5A is a 16-bit signed
integer, I get 346.

295
00:18:05.430 --> 00:18:08.800
We're going to bring our
calculator and we're going to

296
00:18:08.800 --> 00:18:14.095
add 346 to 616,

297
00:18:14.095 --> 00:18:22.495
plus 346 equals 962.

298
00:18:22.495 --> 00:18:24.760
Let's look at our tool.

299
00:18:24.760 --> 00:18:30.490
Yes, it says 962 is where
our next cluster is.

300
00:18:30.490 --> 00:18:33.520
When you're reading a data run,

301
00:18:33.520 --> 00:18:38.980
these values are relevant to
the last piece of the file.

302
00:18:38.980 --> 00:18:44.575
We started at cluster
17,065 for our first piece,

303
00:18:44.575 --> 00:18:49.645
and we jumped backwards to 616.

304
00:18:49.645 --> 00:18:53.125
Now we're jumping forward to 962,

305
00:18:53.125 --> 00:18:55.030
and these are cluster numbers.

306
00:18:55.030 --> 00:18:59.660
Each piece of the file is
relevant to the last piece.

307
00:18:59.940 --> 00:19:03.760
Now we go to our next
and final piece of

308
00:19:03.760 --> 00:19:07.150
our data run here and I
have again a two and a one.

309
00:19:07.150 --> 00:19:09.085
Split them into two nibbles,

310
00:19:09.085 --> 00:19:11.005
add them together, I get a three.

311
00:19:11.005 --> 00:19:13.630
I know my data run
is three bytes long.

312
00:19:13.630 --> 00:19:16.735
I know the one, the right nibble

313
00:19:16.735 --> 00:19:19.780
refers to the size in clusters.

314
00:19:19.780 --> 00:19:21.610
It is a one and it refers to

315
00:19:21.610 --> 00:19:24.040
the byte directly
to the right of it.

316
00:19:24.040 --> 00:19:27.640
The cluster count here is 1D.

317
00:19:27.640 --> 00:19:30.280
I need to translate 1D,

318
00:19:30.280 --> 00:19:33.640
and I could see that it is 29,

319
00:19:33.640 --> 00:19:37.555
so it's 29 clusters
in my final chunk.

320
00:19:37.555 --> 00:19:40.120
Now the two refers to

321
00:19:40.120 --> 00:19:45.760
the two bytes to the right
of the size in clusters.

322
00:19:45.760 --> 00:19:48.550
Refer to these two
bytes the CF and

323
00:19:48.550 --> 00:19:51.860
the EE and they're
red little-endian.

324
00:19:52.260 --> 00:19:54.460
When I translate that to

325
00:19:54.460 --> 00:19:56.800
a 16 bit because
there are two bytes,

326
00:19:56.800 --> 00:19:59.170
16 bit signed integer,

327
00:19:59.170 --> 00:20:02.305
I get negative 305.

328
00:20:02.305 --> 00:20:03.910
I bring up my calculator

329
00:20:03.910 --> 00:20:06.490
again and we're going
from the point we left

330
00:20:06.490 --> 00:20:12.340
off at and we're
going to minus 305.

331
00:20:12.340 --> 00:20:22.970
[NOISE] That gives us 657.

332
00:20:23.610 --> 00:20:29.500
We look at our last cluster,

333
00:20:29.500 --> 00:20:33.760
cluster 657, and
remember the length

334
00:20:33.760 --> 00:20:39.710
was 29 clusters long.

335
00:20:39.930 --> 00:20:43.990
Now, this is how we
read the data runs.

336
00:20:43.990 --> 00:20:46.750
If we were going to
carve this file,

337
00:20:46.750 --> 00:20:49.885
which we're going to do file
carving in a later module,

338
00:20:49.885 --> 00:20:52.120
we would need to find
the beginning and

339
00:20:52.120 --> 00:20:54.520
the end of each of
these runs so that we

340
00:20:54.520 --> 00:20:56.245
could carve each
part of this file

341
00:20:56.245 --> 00:20:59.799
out and put it back together,

342
00:20:59.799 --> 00:21:01.885
because if you found

343
00:21:01.885 --> 00:21:07.795
an unallocated MFT file record

344
00:21:07.795 --> 00:21:11.380
and the data was not
overwritten on the drive,

345
00:21:11.380 --> 00:21:16.005
you could follow the data run
and reconstruct your file,

346
00:21:16.005 --> 00:21:18.165
and recover it that way.

347
00:21:18.165 --> 00:21:22.690
We will do this one when
we cover file carving.